"""
Django settings for your TOM project.

Originally generated by 'django-admin startproject' using Django 2.1.1.
Generated by ./manage.py tom_setup on July 13, 2020, 4:41 p.m.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
from dotenv import load_dotenv

import os
import tempfile
import django_heroku
import logging

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))

load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.getenv("DEBUG", default=1))

DJANGO_SETTINGS_MODULE = os.getenv("DJANGO_SETTINGS_MODULE")

ALLOWED_HOSTS = ["localhost"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_extensions",
    "guardian",
    "tom_common",
    "django_comments",
    "bootstrap4",
    "crispy_forms",
    "django_filters",
    "django_gravatar",
    "tom_targets",
    "tom_alerts",
    "tom_catalogs",
    "tom_observations",
    "tom_dataproducts",
    "tom_publications",
    "panoptes_tom.remoterequests.apps.RemoterequestsConfig",
    "panoptes_tom.custom_tags.apps.CustomTagsConfig",
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "tom_common.middleware.Raise403Middleware",
    "tom_common.middleware.ExternalServiceMiddleware",
    "tom_common.middleware.AuthStrategyMiddleware",
]

ROOT_URLCONF = "panoptes_tom.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CRISPY_TEMPLATE_PACK = "bootstrap4"

WSGI_APPLICATION = "panoptes_tom.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases


# Use the config below if you're setting up a cloud db, otherwise comment it out.
GOOGLE_CLOUD_CONFIG_KEY = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

DATABASES = {
    # Default db config.
    # https://app.gitbook.com/@projectpanoptes/s/panoptes-tom/
    "default": {
        "ENGINE": os.getenv("SQL_ENGINE"),
        "NAME": os.path.join(BASE_DIR, os.getenv("SQL_DATABASE")),
    },
    "cloudsql": {
        "ENGINE": os.getenv("SQL_ENGINE"),
        "NAME": os.getenv("SQL_DATABASE"),
        "USER": os.getenv("SQL_USER"),
        "PASSWORD": os.getenv("SQL_PASSWORD"),
        "PORT": os.getenv("SQL_PORT"),
        "HOST": os.getenv("DJANGO_HOST"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator", },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend",
)

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "admin@panoptesobservationportal.com"

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = False

USE_TZ = True

DATETIME_FORMAT = "Y-m-d H:m:s"
DATE_FORMAT = "Y-m-d"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
MEDIA_ROOT = os.path.join(BASE_DIR, "data")
MEDIA_URL = "/data/"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler", }},
    "loggers": {"logging": {"handlers": ["console"], "level": "INFO"}},
}

# Caching
# https://docs.djangoproject.com/en/dev/topics/cache/#filesystem-caching

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": tempfile.gettempdir(),
    }
}

# TOM Specific configuration
TARGET_TYPE = "SIDEREAL"

# Define the valid data product types for your TOM. Be careful when removing items, as previously valid types will no
# longer be valid, and may cause issues unless the offending records are modified.
DATA_PRODUCT_TYPES = {
    "photometry": ("photometry", "Photometry"),
    "fits_file": ("fits_file", "FITS File"),
    "spectroscopy": ("spectroscopy", "Spectroscopy"),
    "image_file": ("image_file", "Image File"),
}

DATA_PROCESSORS = {
    "photometry": "tom_dataproducts.processors.photometry_processor.PhotometryProcessor",
    "spectroscopy": "tom_dataproducts.processors.spectroscopy_processor.SpectroscopyProcessor",
}

TOM_LATEX_PROCESSORS = {
    "ObservationGroup": "tom_publications.processors.latex_processor.ObservationGroupLatexProcessor",
    "TargetList": "tom_publications.processors.target_list_latex_processor.TargetListLatexProcessor",
}

TOM_FACILITY_CLASSES = [
    "panoptes_tom.tom_observations.facilities.pan012.PanoptesObservationFacility",
    "panoptes_tom.tom_observations.facilities.pan018.PanoptesObservationFacility",
    "panoptes_tom.tom_observations.facilities.pan001.PanoptesObservationFacility",
]

# Define extra target fields here. Types can be any of "number", "string", "boolean" or "datetime"
# See https://tomtoolkit.github.io/docs/target_fields for documentation on this feature
# For example:
# EXTRA_FIELDS = [
#     {'name': 'redshift', 'type': 'number'},
#     {'name': 'discoverer', 'type': 'string'}
#     {'name': 'eligible', 'type': 'boolean'},
#     {'name': 'dicovery_date', 'type': 'datetime'}
# ]
EXTRA_FIELDS = []

# Authentication strategy can either be LOCKED (required login for all views)
# or READ_ONLY (read only access to views)
AUTH_STRATEGY = "READ_ONLY"

# Row-level data permissions restrict users from viewing certain objects unless they are a member of the group to which
# the object belongs. Setting this value to True will allow all `ObservationRecord`, `DataProduct`, and `ReducedDatum`
# objects to be seen by everyone. Setting it to False will allow users to specify which groups can access
# `ObservationRecord`, `DataProduct`, and `ReducedDatum` objects.
TARGET_PERMISSIONS_ONLY = True

# URLs that should be allowed access even with AUTH_STRATEGY = LOCKED
# for example: OPEN_URLS = ['/', '/about']
OPEN_URLS = []

HOOKS = {
    "target_post_save": "tom_common.hooks.target_post_save",
    "data_product_post_upload": "tom_dataproducts.hooks.data_product_post_upload",
    "observation_change_state": "panoptes_tom.tom_observations.hooks.observation_change_state",
}

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [],
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

AUTO_THUMBNAILS = False

THUMBNAIL_MAX_SIZE = (0, 0)

THUMBNAIL_DEFAULT_SIZE = (200, 200)

HINTS_ENABLED = True
HINT_LEVEL = 20

try:
    from local_settings import *  # noqa
except ImportError:
    pass

django_heroku.settings(locals())
